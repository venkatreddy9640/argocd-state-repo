# ===================================================================
# Solution 1B: Prometheus Stack Only (No Grafana)
# File: prometheus-stack-only.yaml
# ===================================================================

apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus-stack
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default

  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: "57.2.0"

    helm:
      valuesObject:
        # DISABLE Grafana - we're using Bitnami separately
        grafana:
          enabled: false

        # Prometheus Configuration
        prometheus:
          enabled: true

          # Internal service (Grafana will connect to this)
          service:
            type: ClusterIP
            port: 9090

          prometheusSpec:
            retention: 7d

            # No persistence - use memory only
            storageSpec: {}

            # Resources
            resources:
              requests:
                memory: "512Mi"
                cpu: "200m"
              limits:
                memory: "1Gi"
                cpu: "500m"

            # Language-agnostic auto-discovery using endpoints
            additionalScrapeConfigs:
              # Standard Kubernetes endpoints discovery (best practice)
              - job_name: 'kubernetes-service-endpoints'
                kubernetes_sd_configs:
                  - role: endpoints
                    namespaces:
                      names: ['default', 'app-namespace']

                relabel_configs:
                  # Only scrape services with prometheus.io/scrape=true annotation
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                    action: keep
                    regex: true

                  # Use custom scheme (http/https) or default to http
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                    action: replace
                    target_label: __scheme__
                    regex: (https?)

                  # Use custom metrics path or default to /metrics
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)

                  # Use custom port if specified
                  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                    action: replace
                    target_label: __address__
                    regex: ([^:]+)(?::\d+)?;(\d+)
                    replacement: $1:$2

                  # Add Kubernetes labels as Prometheus labels
                  - action: labelmap
                    regex: __meta_kubernetes_service_label_(.+)

                  # Add namespace and service name
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    target_label: kubernetes_namespace
                  - source_labels: [__meta_kubernetes_service_name]
                    action: replace
                    target_label: kubernetes_service_name

        # DISABLE AlertManager
        alertmanager:
          enabled: false

        # DISABLE Node Exporter (problematic in Docker Desktop)
        nodeExporter:
          enabled: false

        # Keep Kube State Metrics (useful for cluster monitoring)
        kubeStateMetrics:
          enabled: true
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "128Mi"
              cpu: "100m"

        # Prometheus Operator
        prometheusOperator:
          enabled: true
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          # Disable webhooks for Docker Desktop compatibility
          admissionWebhooks:
            enabled: false
          tls:
            enabled: false

  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true